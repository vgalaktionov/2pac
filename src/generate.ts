import { join } from 'path';
import { VersionType } from './add';
import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { config } from './config';
import chalk from 'chalk';

interface Entry {
    timestamp: Date;
    versionType: VersionType;
    entry: string;
}

const generateChangelog = (filenames: string[]): string => {
    const entries: Entry[] = filenames.map(f => {
        const matches = f.match(/^(?<timestampRaw>\d+)-(?<versionType>major|minor|patch)$/);
        if (matches == null) {
            throw new Error(`Invalid filename: ${f} !`);
        }
        const groups = matches.groups!;
        const timestamp = new Date(groups.timestampRaw);
        const versionType = groups.versionType as VersionType;
        const entry = readFileSync(f).toString();
        return { timestamp, versionType, entry };
    });

    entries.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

    let changelogEntries = '';
    const version = {
        major: 0,
        minor: 0,
        patch: 0,
    };

    for (const { timestamp, versionType, entry } of entries) {
        switch (versionType) {
            case 'patch':
                version.patch++;
                break;
            case 'minor':
                version.patch = 0;
                version.minor++;
                break;
            case 'major':
                version.patch = 0;
                version.minor = 0;
                version.major++;
                break;
        }

        const changelogEntry = `
        \n## [${version.major}.${version.minor}.${
            version.patch
        }] - ${timestamp.getFullYear()}-${timestamp.toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'numeric',
            year: 'numeric',
        })}\n\n${entry}\n`;

        changelogEntries += changelogEntry;
    }

    const changelog = `
    THIS CHANGELOG IS AUTO-GENERATED BY [2pac](https://github.com/vgalaktionov/2pac), DO NOT EDIT!

    # Changelog
    All notable changes to this project will be documented in this file.

    The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
    and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

    ${changelogEntries}
    `;
    return changelog;
};

export default function generate() {
    console.log('2pac generate');

    try {
        const filenames = readdirSync(config.entriesPath);
        const changelog = generateChangelog(filenames);
        writeFileSync(join(process.cwd(), 'CHANGELOG.md'), changelog);
    } catch (error) {
        console.log(chalk.red(error.message));
    }
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var fs_1 = require("fs");
var config_1 = require("./config");
var date_fns_1 = require("date-fns");
var chalk_1 = __importDefault(require("chalk"));
var generateChangelog = function (filenames) {
    var entries = filenames.map(function (f) {
        var matches = f.match(/^(?<timestampRaw>\d+)-(?<versionType>major|minor|patch)$/);
        if (matches == null) {
            throw new Error("Invalid filename: " + f + " !");
        }
        var groups = matches.groups;
        var timestamp = new Date(parseInt(groups.timestampRaw, 10));
        var versionType = groups.versionType;
        var entry = fs_1.readFileSync(path_1.join(config_1.config.entriesPath, f)).toString();
        return { timestamp: timestamp, versionType: versionType, entry: entry };
    });
    entries.sort(function (a, b) { return a.timestamp.getTime() - b.timestamp.getTime(); });
    var changelogEntries = [];
    var version = {
        major: 0,
        minor: 0,
        patch: 0,
    };
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a = entries_1[_i], timestamp = _a.timestamp, versionType = _a.versionType, entry = _a.entry;
        switch (versionType) {
            case 'patch':
                version.patch++;
                break;
            case 'minor':
                version.patch = 0;
                version.minor++;
                break;
            case 'major':
                version.patch = 0;
                version.minor = 0;
                version.major++;
                break;
        }
        var versionString = version.major + "." + version.minor + "." + version.patch;
        var changelogEntry = "## [" + versionString + "] - " + date_fns_1.formatISO(timestamp, {
            representation: 'date',
        }) + "\n\n" + entry;
        changelogEntries.push(changelogEntry);
    }
    var changelog = "THIS CHANGELOG IS AUTO-GENERATED BY [2pac](https://github.com/vgalaktionov/2pac), DO NOT EDIT!\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n" + changelogEntries.reverse().join('');
    return { changelog: changelog, version: version.major + "." + version.minor + "." + version.patch };
};
function generate() {
    console.log('2pac generate');
    try {
        var filenames = fs_1.readdirSync(config_1.config.entriesPath);
        var _a = generateChangelog(filenames), changelog = _a.changelog, version = _a.version;
        fs_1.writeFileSync(path_1.join(process.cwd(), 'CHANGELOG.md'), changelog);
        console.log(chalk_1.default.cyan('Written CHANGELOG.md!'));
        var pkg = require(path_1.join(process.cwd(), 'package.json'));
        pkg.version = version;
        fs_1.writeFileSync(path_1.join(process.cwd(), 'package.json'), JSON.stringify(pkg, undefined, 4));
        console.log(chalk_1.default.cyan('Updated package.json!'));
    }
    catch (error) {
        console.log(chalk_1.default.red(error.message));
    }
}
exports.default = generate;
